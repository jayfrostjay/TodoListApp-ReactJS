{"version":3,"sources":["Components/TodoItem.js","Components/Todos.js","Components/AddTodo.js","Components/layout/Header.js","Components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","getStyle","background","padding","borderBottom","textDecoration","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","float","borderRadius","cursor","Todos","todos","map","index","key","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","headerStyle","textAlign","LinkStyle","Header","to","About","Fragment","App","filter","newTodo","uuidv4","complete","Axios","get","then","res","data","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99f65a39.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class TodoItem extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration : this.props.todo.completed ? \r\n                'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo\r\n        return (\r\n            <div style={ this.getStyle() }>\r\n                <p>\r\n                    <input type=\"checkbox\" \r\n                        onChange={this.props.markComplete.bind(this, id)} \r\n                        /> {' '}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    float: 'right',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer'\r\n}\r\n\r\n// to validate the proptypes passed by the callers\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Todos extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render (){\r\n        return this.props.todos.map((todo, index) => (\r\n            <TodoItem \r\n                key={todo.id} \r\n                todo={todo} \r\n                delTodo={this.props.delTodo}\r\n                markComplete={this.props.markComplete} />\r\n        ))\r\n    }\r\n}\r\n \r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title : ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name] : e.target.value })\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.addTodo(this.state.title)\r\n        this.setState({ title: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    placeholder=\"Add Todo...\" \r\n                    style={{flex: '10', padding: '5px'}}\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                    />\r\n                <input \r\n                    className=\"btn\"\r\n                    type=\"submit\" \r\n                    value=\"Submit\" \r\n                    style={{flex: '1'}}\r\n                    />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={LinkStyle} to=\"/\">Home</Link> | <Link style={LinkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst LinkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>ReactJS - Basic TodoList App v1.0.0</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\n\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\n\r\nimport Todos from './Components/Todos'\r\nimport AddTodo from './Components/AddTodo'\r\nimport Header from './Components/layout/Header'\r\nimport About from './Components/pages/About'\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Axios from 'axios'\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get('http://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      .then(res => this.setState({ todos: res.data }))\r\n  }\r\n\r\n  // toogle complete\r\n  markComplete = (id) => {\r\n    this.setState({ todos : this.state.todos.map(todo => {\r\n      if(todo.id == id){\r\n        todo.completed = !todo.completed\r\n      }\r\n      return todo\r\n    }) })\r\n  }\r\n\r\n  // delete todo\r\n  delTodo = (id) => {\r\n    //for http request\r\n    // Axios.delete(`http://jsonplaceholder.typicode.com/todos/${id}`)\r\n    //   .then(res => this.setState({\r\n    //     todos : [...this.state.todos.filter(todo => todo.id !== id )]\r\n    //   }))\r\n\r\n      //for local storage\r\n      this.setState({\r\n        todos : [...this.state.todos.filter(todo => todo.id !== id )] })\r\n  }\r\n\r\n  //add todo\r\n  addTodo = (title) => {\r\n    //for local storage\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n      title: title,\r\n      complete: false\r\n    }\r\n\r\n    this.setState({\r\n      todos : [...this.state.todos, newTodo]\r\n    })\r\n\r\n    //for http request\r\n    // Axios.post('http://jsonplaceholder.typicode.com/todos', {\r\n    //   title,\r\n    //   completed: false\r\n    // }).then( res => this.setState({\r\n    //   todos : [...this.state.todos, res.data]\r\n    // }) )\r\n  }\r\n  \r\n  render (){\r\n    return(\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"container\" >\r\n            <Header />\r\n            <Route exact path=\"/\" render={props => (\r\n              <React.Fragment>\r\n                <AddTodo addTodo={this.addTodo} />\r\n                <Todos todos={this.state.todos} \r\n                markComplete={this.markComplete}\r\n                delTodo={this.delTodo} />\r\n              </React.Fragment>\r\n            )} />\r\n            <Route path=\"/about\" component={About} /> \r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}